(()=>{"use strict";class t{constructor(t){this.task=t}init(){this.bindToDOM()}static template(t){return`\n\t\t\t<div class="pinned__card ">\n\t\t\t\t<span class="task__title">${t}</span>\n\t\t\t\t<button class="task__del hidden"></button>\n\t\t\t</div>\n`}bindToDOM(){this.cell=document.querySelector(".cell__active"),this.pin=this.addTask(this.task),this.cell.insertAdjacentHTML("beforeend",this.pin),this.cell.classList.remove("cell__active")}addTask(){const t=document.querySelector(".form-text");if(this.task=t.value.trim(),this.task){return this.constructor.template(this.task)}return!1}}class e{getPinCards(){return JSON.parse(localStorage.getItem("pinCards"))||[]}save(t){localStorage.setItem("pinCards",JSON.stringify(t))}}const s=document.querySelector(".container"),n=new class{constructor(t){this.container=t,this.board=null}createBoard(){this.board=document.createElement("div"),this.board.classList.add("board"),this.bindToDOM()}static get markup(){return'\n\t<div class="cell cell-todo" data-cell="todo">\n\t\t<h3 class="title">todo</h3>\n\t\t<button class="button button_add">+Add another card</button>\n\t</div>\n\t<div class="cell cell-in-progress" data-cell="in-progress">\n\t\t<h3 class="title">in-progress</h3>\n\t\t<button class="button button_add">+Add another card</button>\n\t</div>\n\t<div class="cell cell-done" data-cell="done">\n\t\t<h3 class="title">done</h3>\n\t\t<button class="button button_add">+Add another card</button>\n<div class="pin__list"></div>\n\t</div>\n'}bindToDOM(){this.container.insertAdjacentHTML("afterbegin",this.constructor.markup)}getBoard(){return this.createBoard(),this.board}}(s),r=new class{constructor(t){this.board=t,this.state=[]}init(){this.board.getBoard(),this.container=document.querySelector(".container"),this.onClickAddCard(),this.container.addEventListener("click",this.onClickDeleteCard.bind(this)),this.container.addEventListener("click",this.onClickPinCard.bind(this)),this.container.addEventListener("click",this.deletePinnedCard.bind(this)),this.container.addEventListener("mouseover",(t=>this.onMouseOver(t))),this.container.addEventListener("mouseout",(t=>this.onMouseOut(t))),this.container.addEventListener("mousedown",(t=>this.dragDown(t))),this.container.addEventListener("mousemove",(t=>this.dragMove(t))),this.container.addEventListener("mouseup",(t=>this.dragUp(t))),this.container.addEventListener("mouseleave",(t=>this.dragLeave(t))),this.storage=new e,this.state=this.storage.getPinCards(),this.loadState(this.state)}static get creatingCard(){return'\n\t<div class="content">\n\t\t\t<div class="block__button">\n\t\t\t\t<button class="form-button__add">Add Card</button>\n\t\t\t\t<button class="form-button__del">X</button>\n\t\t\t</div>\n\t\t\t<div class="form">\n\t\t\t\t<form class="form-area">\n\t\t\t\t\t<textarea class="form-text"  placeholder="Enter a title for this card..."></textarea>\n\t\t\t\t</form>\n\t\t\t</div>\n\t\t</div>\n'}onClickAddCard(){this.addCardBtn=document.querySelectorAll(".button_add"),this.addCardBtn.forEach((t=>{t.addEventListener("click",(()=>{t.parentElement.classList.add("cell__active"),t.parentElement.insertAdjacentHTML("beforeend",this.constructor.creatingCard),t.classList.add("hidden")}))}))}onClickDeleteCard(t){t.preventDefault(),t.target.classList.contains("form-button__del")&&(t.target.classList.contains("form-button__del")&&t.target.parentElement.closest(".content").remove(),document.querySelectorAll(".button_add").forEach((t=>{t.classList.contains("hidden"),t.classList.remove("hidden")})))}onClickPinCard(e){e.preventDefault(),this.card=new t;const s=document.querySelector(".form-text");if(!e.target.classList.contains("form-button__add")||""===s.value)return;const n=e.currentTarget.querySelector(".cell__active").dataset.cell;this.card.init();const r={description:this.card.task,type:n};this.state.push(r),this.storage.save(this.state),e.target.parentElement.closest(".content").remove(),document.querySelectorAll(".button_add").forEach((t=>{t.classList.contains("hidden"),t.classList.remove("hidden")}))}deletePinnedCard(t){if(t.preventDefault(),!t.target.classList.contains("task__del"))return;const e=t.target.previousElementSibling.textContent,s=this.state.findIndex((t=>t.description===e));this.state.splice(s,1),this.storage.save(this.state),t.target.parentElement.remove()}onMouseOver(t){const e=t.target.closest(".pinned__card");if(!e)return;e.querySelector(".task__del").classList.toggle("hidden")}onMouseOut(t){const e=t.target.querySelector(".task__del");e&&e.classList.add("hidden")}dragDown(t){if(t.target.classList.contains("task__del"))return;const e=t.target.closest(".pinned__card");if(!e)return;t.preventDefault(),document.body.style.cursor="grabbing",this.dropEl=e.cloneNode(!0);const{width:s,height:n,left:r,top:i}=e.getBoundingClientRect();this.coordX=t.clientX-r,this.coordY=t.clientY-i,this.dropEl.classList.add("dragged"),this.dropEl.style.width=`${s}px`,this.dropEl.style.height=`${n}px`,document.body.appendChild(this.dropEl),this.dropEl.style.top=`${i}px`,this.dropEl.style.left=`${r}px`,this.dragEl=e,this.dragEl.classList.add("hidden")}dragMove(t){t.preventDefault(),this.dropEl&&(document.body.style.cursor="grabbing",this.dropEl.style.left=t.pageX-this.coordX+"px",this.dropEl.style.top=t.pageY-this.coordY+"px")}dragUp(t){if(!this.dragEl||!this.dropEl)return;t.preventDefault(),document.body.style.cursor="auto";const e=document.elementFromPoint(t.clientX,t.clientY).closest(".pinnes__card"),s=t.target.closest(".cell");if(!s)return this.dropEl.remove(),void this.dragEl.classList.remove("hidden");s.insertBefore(this.dragEl,e);const n=this.dragEl.querySelector(".task__title").textContent,r=this.state.findIndex((t=>t.description===n));this.state.splice(r,1),this.storage.save(this.state);const i={description:n,type:s.dataset.cell};this.state.push(i),this.storage.save(this.state),this.dragEl.classList.remove("hidden"),this.dropEl.remove(),this.dropEl=null}dragLeave(){this.dropEl&&(this.dragEl.classList.remove("hidden"),this.dropEl.remove(),this.dropEl=null,this.dragEl=null)}loadState(e){const s=new t,n=document.querySelectorAll(".cell"),r=this.searchCell(n);this.searchPin(e).forEach((t=>{t[Symbol.iterator]=this.generatorMethod.bind(null,t);for(const e of t)if(r.includes(e)){const e=s.constructor.template(t.description);n.forEach((s=>{t.type.includes(s.dataset.cell)&&s.insertAdjacentHTML("beforeend",e)}))}}))}*generatorMethod(t){const e=Object.keys(t);for(let s=0;s<e.length;s+=1)yield t[e[s]]}searchCell(t){const e=[];return t.forEach((t=>e.push(t.dataset.cell))),e}searchPin(t){const e=[];return t.forEach((t=>e.push(t))),e}}(n);r.init()})();